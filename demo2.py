# обязательное подключение нужных модулей
from python_code.main import *

# Пример решения реальной задачи. Проверим, действительно ли метод вращения якоби находит собственные числа и векторы

# создаем квадратную матрицу 3 на 3 со значениями из методички
матрица = Матрица(
    [
        [17, 1, 1],
        [1, 17, 2],
        [1,  2, 4]
    ]
)
# покажем матрицу в консоли для удобства
матрица.показать_в_консоли()

# запросим решение
решение = method_rot_yakobi(матрица)

собственные_величины = None
# выполним все шаги решения
for шаг in решение:
    # на каждом шагу пытаемся получить решение
    try:
        собственные_величины = шаг["Решение"]
    except KeyError:
        # если решения все еще нет - продолжаем
        continue

# для проверки можно на них взглянуть
напечатать_в_консоль(собственные_величины)
напечатать_в_консоль()

# разберем собственные величины
собственные_числа = собственные_величины['Собственные числа']
собственные_векторы = собственные_величины['Собственные векторы']

# разберем все получившиеся собственные величины
for номер_величины in диапазон(длина(собственные_векторы)):
    # получим новый вектор и число
    собственный_вектор = собственные_векторы[номер_величины]
    собственное_число = собственные_числа[номер_величины]

    # преобразование ниже необходимо из-за того, что собственные векторы представлены в виде списков,
    # а для произведения нужны векторы (матрицы)
    собственный_вектор = Матрица(собственный_вектор)

    # теперь вектор это не список, а матрица с одной строкой (вектор), как бы "горизонтальный"
    # но в результате умножения будут получаться матрицы с одним столбцом - тоже векторы, но "вертикально"
    # поэтому можно сразу транспонировать (повернуть)
    собственный_вектор = собственный_вектор.транспонированная

    # теперь можно умножить матрицу на вектор и поделить на соответствующее собственное число
    # должен получиться тот же вектор (по определению)
    новый_вектор = матрица * собственный_вектор / собственное_число

    # так как по умолчанию было сделано 8 итераций методом вращения, нужно округлить результат до 8 знака
    # (округлить каждую компоненту вектора)
    собственный_вектор = собственный_вектор.применить_ко_всем(округлить, 8)
    новый_вектор = новый_вектор.применить_ко_всем(округлить, 8)

    # теперь можно их сравнить
    if собственный_вектор == новый_вектор:
        напечатать_в_консоль(f'Вектор под номером {номер_величины} является собственным вектором для данной матрицы')
    else:
        напечатать_в_консоль(f'Вектор под номером {номер_величины} не является собственным вектором для данной матрицы')

# чтобы консоль закрылась не сразу, нужно запросить ввод с клавиатуры
напечатать_в_консоль()
ввести_с_клавиатуры("Нажмите ENTER чтобы выйти...")
